/*
 * core/x86_64/isrs.S - GENERATED BY isrs.sh DO NOT EDIT THIS FILE
 * 
 * Copyright 2016 CC-by-nc-sa-4.0 bztsrc@github
 * https://creativecommons.org/licenses/by-nc-sa/4.0/
 * 
 * You are free to:
 *
 * - Share — copy and redistribute the material in any medium or format
 * - Adapt — remix, transform, and build upon the material
 *     The licensor cannot revoke these freedoms as long as you follow
 *     the license terms.
 * 
 * Under the following terms:
 *
 * - Attribution — You must give appropriate credit, provide a link to
 *     the license, and indicate if changes were made. You may do so in
 *     any reasonable manner, but not in any way that suggests the
 *     licensor endorses you or your use.
 * - NonCommercial — You may not use the material for commercial purposes.
 * - ShareAlike — If you remix, transform, or build upon the material,
 *     you must distribute your contributions under the same license as
 *     the original.
 *
 * @brief Low level exception and Interrupt Service Routines
 */
#define _AS 1
#include <errno.h>
#include <syscall.h>
#include <limits.h>
#include "isr.h"
#include "platform.h"
#include "ccb.h"
#include "tcb.h"

.global isr_inithw
.global isr_exc00divzero
.global isr_irq0
.global isr_enableirq
.global isr_disableirq

.extern isr_ticks
.extern isr_gainentropy
.extern isr_savecontext
.extern isr_loadcontext
.extern isr_syscall0
.extern isr_alarm
.extern isr_timer
.extern gdt64_tss
.extern excabort
.extern pmm

.section .data
    .align	16
idt64:
    .word	(32+24)*16-1
    .quad	0
    .align	8
isr_next:
    .quad	0
ctrl:
    .asciz "PIC"
    .align 8
nopic:
    .asciz	"%s not supported"
ioctrl:
    .asciz	"IOAPIC"

.section .text
/* void isr_enableirq(uint64_t irq) */
isr_enableirq:
    movl	%edi, %ecx
    andw	$0xF, %cx
    cmpb	$8, %cl
    jae		1f
    inb		$PIC_MASTER_DATA, %al
    btrw	%cx, %ax
    outb	%al, $PIC_MASTER_DATA
    ret
1:  subb	$8, %cl
    inb		$PIC_SLAVE_DATA, %al
    btrw	%cx, %ax
    outb	%al, $PIC_SLAVE_DATA
    ret

/* void isr_disableirq(uint64_t irq) */
isr_disableirq:
    cmpl	$2, %edi
    je		1f
    movl	%edi, %ecx
    andw	$0xF, %cx
    cmpl	$8, %edi
    jae		2f
    inb		$PIC_MASTER_DATA, %al
    btsw	%cx, %ax
    outb	%al, $PIC_MASTER_DATA
1:  ret
2:  subl	$8, %ecx
    inb		$PIC_SLAVE_DATA, %al
    btsw	%cx, %ax
    outb	%al, $PIC_SLAVE_DATA
    ret

/* set up gates and msrs, enable interrupt controller */
isr_inithw:
/* TSS64 descriptor in GDT */
    movq	$gdt64_tss, %rbx
    movl	%esi, %eax
    andl	$0xFFFFFF, %eax
    addl	%eax, 2(%rbx)
    movq	%rsi, %rax
    shrq	$24, %rax
    addq	%rax, 7(%rbx)
/* setup task register */
    movl	$0x28 + 3, %eax
    ltr		%ax
/* IDTR */
    movq	$idt64, %rax
    movq	%rdi, 2(%rax)
    lidt	(%rax)
/* setup syscall dispatcher */
    /* STAR */
    xorq	%rcx, %rcx
    movl	$0xC0000081, %ecx
    xorl	%eax, %eax
    movl	$0x00130008, %edx
    wrmsr
    /* LSTAR */
    incl	%ecx
    movq	$isr_syscall0, %rax
    movq    %rax, %rdx
    shrq    $32, %rdx
    wrmsr
    /* SFMASK */
    incl	%ecx
    incl	%ecx
    xorl    %eax, %eax
    wrmsr
/* initialize IRQs, masking all */
    /* remap PIC. We have to do this even when PIC is disabled. */
    movb	$0x11, %al
    outb	%al, $PIC_MASTER
    outb	%al, $PIC_SLAVE
    movb	$0x20, %al
    outb	%al, $PIC_MASTER_DATA
    movb	$0x28, %al
    outb	%al, $PIC_SLAVE_DATA
    movb	$0x4, %al
    outb	%al, $PIC_MASTER_DATA
    movb	$0x2, %al
    outb	%al, $PIC_SLAVE_DATA
    movb	$0x1, %al
    outb	%al, $PIC_MASTER_DATA
    outb	%al, $PIC_SLAVE_DATA
    /* PIC init */
    movb	$0xFF, %al
    outb	%al, $PIC_SLAVE_DATA
    btrw	$2, %ax /* enable cascade irq 2 */
    outb	%al, $PIC_MASTER_DATA
    /* enable NMI */
    inb		$0x70, %al
    btrw	$8, %ax
    outb	%al, $0x70
    ret

/* exception handler ISRs */
	.align 128, 0x90
isr_exc00divzero:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$0, %dil
    callq	exc00divzero
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc01debug:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$1, %dil
    callq	exc01debug
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc02nmi:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$2, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc03chkpoint:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$3, %dil
    callq	exc03chkpoint
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc04overflow:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$4, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc05bound:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$5, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc06invopcode:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$6, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc07devunavail:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$7, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc08dblfault:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$8, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc09coproc:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$9, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc10invtss:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = errcode; */
    popq	680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$10, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc11segfault:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = errcode; */
    popq	680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$11, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc12stackfault:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = errcode; */
    popq	680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$12, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc13genprot:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = errcode; */
    popq	680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$13, %dil
    callq	exc13genprot
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc14pagefault:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = errcode; */
    popq	680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$14, %dil
    callq	exc14pagefault
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc15unknown:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$15, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc16float:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$16, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc17alignment:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$17, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc18machinecheck:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$18, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc19double:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$19, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc20:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$20, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc21:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$21, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc22:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$22, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc23:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$23, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc24:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$24, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc25:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$25, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc26:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$26, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc27:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$27, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc28:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$28, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc29:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$29, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc30:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$30, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

isr_exc31:
    xchg %bx, %bx
    cli
    callq	isr_savecontext
    /* tcb->excerr = 0; */
    movq	$0, 680
    xorq	%rdi, %rdi
    movq	__PAGESIZE-40, %rsi
    movb	$31, %dil
    callq	excabort
    callq	isr_loadcontext
    iretq
.align 64, 0x90

/* IRQ handler ISRs */
    .align , 0x90
.align 128, 0x90
isr_irq0:
    cli
    call	isr_savecontext
    /* isr_timer(SRV_core, SYS_IRQ, ISR_IRQTMR, 0,0,0,0); */
    call	isr_timer
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$0, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq1:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$1, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq2:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$2, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq3:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$3, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq4:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$4, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq5:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$5, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq6:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$6, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq7:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$7, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq8:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$8, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq9:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$9, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq10:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$10, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq11:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$11, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq12:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$12, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq13:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$13, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq14:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$14, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq15:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$15, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq16:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$16, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq17:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$17, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq18:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$18, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq19:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$19, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq20:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$20, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq21:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$21, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq22:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$22, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq23:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$23, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

.align 128, 0x90
isr_irq24:
    cli
    call	isr_savecontext
    
    /* tcb->memroot == sys_mapping? */
    movq	%cr3, %rax
    cmpq	sys_mapping, %rax
    je		1f
    /* no, switch to system task */
    movq	sys_mapping, %rax
    movq	%rax, %cr3
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$24, %dil
    pushq   %rdi
    call	isr_disableirq
    /* msg_sends(EVT_DEST(SRV_CORE) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq    %rdx
    xorq	%rcx, %rcx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    call	isr_gainentropy
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* switch task */
    movq	isr_next, %rax
    orq 	%rax, %rax
    jz  	1f
    movq	%rax, %cr3
    xorq	%rax, %rax
    movq	%rax, isr_next
1:  call	isr_loadcontext
    iretq
.align 128, 0x90

